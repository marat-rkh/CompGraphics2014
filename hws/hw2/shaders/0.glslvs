#version 130

in vec3 in_pos;
in vec2 vertexUV;
in vec3 in_norm;
in vec3 tangents;

out vec2 UV;
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 Tangent_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;

uniform mat4 mvp;
uniform mat4 view;
uniform mat4 model;
uniform vec3 lightPos;

void main() {
        gl_Position =  mvp * vec4(in_pos,1);

        Position_worldspace = (model * vec4(in_pos,1)).xyz;

        vec3 vertexPosition_cameraspace = (view * model * vec4(in_pos,1)).xyz;
        EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

        vec3 LightPosition_cameraspace = ( view * vec4(lightPos,1)).xyz;
        LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;

        Normal_cameraspace = (model * vec4(in_norm, 0)).xyz;
        Tangent_cameraspace = (model * vec4(tangents, 0)).xyz;

        UV = vertexUV;
}
